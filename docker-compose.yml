services:
  dbmigration:
    image: ${DOCKER_REGISTRY-}dbmigration
    container_name: dbmigration
    build:
      context: .
      dockerfile: DbMigrationRunner/Dockerfile
    depends_on:
      platformDb:
        condition: service_healthy
      brandDb:
        condition: service_healthy
    environment:
      BrandService_CONN: Host=brandDb;Port=5432;Username=brands;Password=postgres;Database=brand
      PlatformService_CONN: Host=platformDb;Port=5432;Username=platforms;Password=postgres;Database=platform
    networks:
      - platform_net
      - brand_net   
 

  platformDb:
    image: postgres:latest
    container_name: platformDb
    environment:
      POSTGRES_USER: platforms
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: platform
    volumes:
      - platform_data:/var/lib/postgresql/data 
      - ./PlatformService/Scripts/000_create_roles.sql:/docker-entrypoint-initdb.d/000_create_roles.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U platforms -d platform"]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s
    networks:
      - platform_net

  platformservice:
    image: ${DOCKER_REGISTRY-}platformservice
    container_name: platformservice
    build:
      context: .
      dockerfile: PlatformService/Dockerfile
    ports:
      - "5000:5000"
      - "5001:5001"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "https://+:5001;http://+:5000"
      ASPNETCORE_Kestrel__Certificates__Default__Password: platformcert
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https/aspnetapp.pfx
      DATABASE_HOST: platformDb
      DATABASE_PORT: "5432"
      DATABASE_USER: platforms
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: platform
    volumes:
      - ./PlatformService/Scripts:/app/Scripts
      - ./PlatformService/Mutable:/app/Mutable
      - "/c/Users/ogund/.aspnet/https:/https:ro"  
    networks:
      - platform_net
    depends_on:
      dbmigration:
        condition: service_completed_successfully
      platformDb:
        condition: service_healthy
  
  brandDb:
    image: postgres:latest
    container_name: brandDb
    environment:
      POSTGRES_USER: brands
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: brand
    volumes:
      - brand_data:/var/lib/postgresql/data 
      - ./BrandService/Scripts/000_create_roles.sql:/docker-entrypoint-initdb.d/000_create_roles.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brands -d brand"]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s
    networks:
      - brand_net

  brandservice:
    image: ${DOCKER_REGISTRY-}brandservice
    container_name: brandservice
    build:
      context: .
      dockerfile: BrandService/Dockerfile
    ports:
      - "6000:6000"
      - "6001:6001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:6001;http://+:6000
      - ASPNETCORE_Kestrel__Certificates__Default__Password=platformcert
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - DATABASE_HOST=brandDb
      - DATABASE_PORT=5432
      - DATABASE_USER=brands
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=brand
    volumes:
      - ./BrandService/Scripts:/app/Scripts
      - ./BrandService/Mutable:/app/Mutable
      - "/c/Users/ogund/.aspnet/https:/https:ro"
    networks:
      - brand_net
    depends_on:
      dbmigration:
        condition: service_completed_successfully
      brandDb:
        condition: service_healthy

networks:
  platform_net:
  brand_net:
    driver: bridge

volumes:
  platform_data:
  brand_data:
